{"ast":null,"code":"import _slicedToArray from \"/Users/ops03/Desktop/tic-tac-toe/front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      fc: 0,\n      isNext: \"X\"\n    };\n  }\n\n  componentDidMount() {\n    this.play();\n  }\n\n  play() {\n    this.setState({\n      squares: Array(9).fill(null)\n    });\n    this.emptyIndexies(this.state.squares);\n    var aiPlayer = \"X\";\n    this.minimax(this.state.squares, aiPlayer);\n  }\n\n  renderSquare(i) {\n    return React.createElement(\"button\", {\n      onClick: () => this.handlePick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, this.state.squares[i]);\n  }\n\n  handlePick(i) {\n    const squares = this.state.squares;\n\n    if (this.winner(squares)) {\n      console.log(\"winner\");\n      return;\n    }\n\n    if (this.full(squares) === \"X\" || this.full(squares) === \"O\") {\n      console.log(\"full\");\n      return;\n    }\n\n    var aiPlayer = \"X\";\n    var huPlayer = \"O\";\n    squares[i] = this.state.isNext ? aiPlayer : huPlayer;\n    this.setState({\n      squares: squares,\n      isNext: !this.state.isNext\n    });\n    console.log(\"update\");\n  }\n\n  minimax(newBoard, player) {\n    if (this.winner(this.state.squares)) {\n      return;\n    } else if (!this.winner(this.state.squares) && this.isFilled) {\n      return;\n    } //add one to function calls\n\n\n    this.setState({\n      fc: this.state.fc + 1\n    });\n    console.log(this.state.fc); //available spots\n\n    var availSpots = this.emptyIndexies(newBoard);\n    var huPlayer = \"O\";\n    var aiPlayer = \"X\"; // checks for the terminal states such as win, lose, and tie and returning a value accordingly\n\n    if (this.winning(newBoard, huPlayer)) {\n      return {\n        score: -10\n      };\n    } else if (this.winning(newBoard, aiPlayer)) {\n      return {\n        score: 10\n      };\n    } else if (availSpots.length === 0) {\n      return {\n        score: 0\n      };\n    } // an array to collect all the objects\n\n\n    var moves = []; // loop through available spots\n\n    for (var i = 0; i < availSpots.length; i++) {\n      //create an object for each and store the index of that spot that was stored as a number in the object's index key\n      var move = {};\n      newBoard[availSpots[i]] = player;\n\n      if (player === aiPlayer) {\n        move.score = this.minimax(newBoard, huPlayer).score;\n      } else {\n        move.score = this.minimax(newBoard, aiPlayer).score;\n      }\n\n      newBoard[availSpots[i]] = move.index; // push the object to the array\n\n      console.log(move.index);\n      console.log(move);\n    }\n  }\n\n  full(squares) {\n    let count = 0;\n    squares.forEach(function (item) {\n      if (item !== null) {\n        count++;\n      }\n    });\n\n    if (count === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winning(board, player) {\n    if (board[0] === player && board[1] === player && board[2] === player || board[3] === player && board[4] === player && board[5] === player || board[6] === player && board[7] === player && board[8] === player || board[0] === player && board[3] === player && board[6] === player || board[1] === player && board[4] === player && board[7] === player || board[2] === player && board[5] === player && board[8] === player || board[0] === player && board[4] === player && board[8] === player || board[2] === player && board[4] === player && board[6] === player) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winner(squares) {\n    console.log(squares);\n    const win_combination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < win_combination.length; i++) {\n      const _win_combination$i = _slicedToArray(win_combination[i], 3),\n            a = _win_combination$i[0],\n            b = _win_combination$i[1],\n            c = _win_combination$i[2];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (squares[a] === \"O\") {\n          this.play();\n        } else {\n          this.play();\n        }\n\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  emptyIndexies(board) {\n    return board.filter(s => s != \"O\" && s != \"X\");\n  }\n\n  render() {\n    var aiPlayer = \"X\";\n    const winner = this.winner(this.state.squares);\n    const isFilled = this.full(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'The winner is: ' + winner;\n    } else if (!winner(this.state.squares) && isFilled) {\n      status = 'Game drawn';\n    } else {\n      status = 'Now ' + (this.state.isNext ? 'X' : 'O') + '\\'s turn';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)), React.createElement(\"form\", {\n      action: this.emptyIndexies(this.state.squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js"],"names":["React","axios","Board","Component","constructor","props","state","squares","Array","fill","fc","isNext","componentDidMount","play","setState","emptyIndexies","aiPlayer","minimax","renderSquare","i","handlePick","winner","console","log","full","huPlayer","newBoard","player","isFilled","availSpots","winning","score","length","moves","move","index","count","forEach","item","board","win_combination","a","b","c","filter","s","render","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {squares: Array(9).fill(null), fc: 0, isNext: \"X\"};\n    }\n\n    componentDidMount() {\n        this.play()\n    }\n\n    play() {\n        this.setState({squares: Array(9).fill(null)})\n        this.emptyIndexies(this.state.squares);\n        var aiPlayer = \"X\";\n        \n        this.minimax(this.state.squares, aiPlayer)\n        \n    }\n\n    renderSquare(i) {\n        return <button onClick={() => this.handlePick(i)}>{this.state.squares[i]}</button>\n    }\n\n    handlePick(i) {\n        const squares = this.state.squares;\n\t\tif (this.winner(squares)) {\n            console.log(\"winner\")\n            return;\n\t\t}\n\n\t\tif(this.full(squares) === \"X\" || this.full(squares) === \"O\" ) {\n            console.log(\"full\")\n\t\t\treturn;\n        }\n    \n\n        var aiPlayer = \"X\";\n        var huPlayer = \"O\";\n\t\tsquares[i] = this.state.isNext ? aiPlayer : huPlayer;\n\t\tthis.setState({\n\t\t\tsquares: squares,\n\t\t\tisNext: !this.state.isNext\n        });\n        console.log(\"update\")\n    }\n\n    minimax(newBoard, player){\n        if (this.winner(this.state.squares)) {\n            return;\n        } else if(!this.winner(this.state.squares) && this.isFilled) {\n            return;\n        }\n        //add one to function calls\n        this.setState({fc: this.state.fc + 1});\n        console.log(this.state.fc);\n        //available spots\n        var availSpots = this.emptyIndexies(newBoard);\n        var huPlayer = \"O\";\n        var aiPlayer = \"X\";\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\n        if (this.winning(newBoard, huPlayer)){\n           return {score:-10};\n        }\n          else if (this.winning(newBoard, aiPlayer)){\n          return {score:10};\n          }\n        else if (availSpots.length === 0){\n            return {score:0};\n        }\n\n        // an array to collect all the objects\n        var moves = [];\n\n        // loop through available spots\n        for (var i = 0; i < availSpots.length; i++){\n            //create an object for each and store the index of that spot that was stored as a number in the object's index key\n            var move = {};\n            newBoard[availSpots[i]] = player;\n            if (player === aiPlayer){\n                move.score = this.minimax(newBoard, huPlayer).score;\n              }\n              else{\n                move.score = this.minimax(newBoard, aiPlayer).score;\n              }\n        \n            newBoard[availSpots[i]] = move.index;\n\n            // push the object to the array\n            console.log(move.index);\n            console.log(move);\n        }\n    }\n\n    full(squares) {\n        let count = 0;\n        squares.forEach(function (item) {\n            if (item !== null) {\n                count++;\n            }\n        });\n        if(count === 9) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    winning(board, player) {\n        if (\n            (board[0] === player && board[1] === player && board[2] === player) ||\n            (board[3] === player && board[4] === player && board[5] === player) ||\n            (board[6] === player && board[7] === player && board[8] === player) ||\n            (board[0] === player && board[3] === player && board[6] === player) ||\n            (board[1] === player && board[4] === player && board[7] === player) ||\n            (board[2] === player && board[5] === player && board[8] === player) ||\n            (board[0] === player && board[4] === player && board[8] === player) ||\n            (board[2] === player && board[4] === player && board[6] === player)\n            ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    winner(squares) {\n        console.log(squares)\n        const win_combination = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n      \n        for (let i = 0; i < win_combination.length; i++) {\n            const [a, b, c] = win_combination[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                if (squares[a] === \"O\") {\n\n                    this.play()\n                } else {\n \n            \n                    this.play()\n                }\n                return squares[a];\n            }\n        }\n      \n        return null;\n    }\n\n    emptyIndexies(board){\n        return board.filter(s => s != \"O\" && s != \"X\");\n    }\n\n  render() {\n    var aiPlayer = \"X\";\n    const winner = this.winner(this.state.squares);\n    const isFilled = this.full(this.state.squares);\n    let status;\n    if (winner) {\n        status = 'The winner is: ' + winner;\n    } else if(!winner(this.state.squares) && isFilled) {\n        status = 'Game drawn';\n    } else {\n        status = 'Now ' + (this.state.isNext ? 'X' : 'O') + '\\'s turn';\n    }\n\n    return (\n    <div className=\"container\">\n        <h1 className=\"status\">{status}</h1>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <form action={this.emptyIndexies(this.state.squares)}>\n            <input type=\"submit\" value=\"New game\"/>\n        </form>\n    </div>\n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
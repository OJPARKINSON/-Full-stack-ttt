{"ast":null,"code":"import _slicedToArray from \"/Users/ops03/Desktop/tic-tac-toe/front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      fc: 0\n    };\n  }\n\n  componentDidMount() {\n    var aiPlayer = \"X\";\n    var bestSpot = this.minimax(this.state.squares, aiPlayer);\n    console.log(\"index: \" + bestSpot.index);\n    console.log(\"function calls: \" + this.state.fc);\n  }\n\n  renderSquare(i) {\n    return React.createElement(\"button\", {\n      onClick: () => this.handlePick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, this.state.squares[i]);\n  }\n\n  handlePick(i) {\n    const squares = this.state.squares.slice();\n\n    if (this.winner(squares) || squares[i]) {\n      return;\n    }\n\n    if (this.full(squares) === true) {\n      return;\n    }\n\n    var aiPlayer = \"X\";\n    var huPlayer = \"O\";\n    squares[i] = this.state.isNext ? aiPlayer : huPlayer;\n    this.setState({\n      squares: squares,\n      isNext: !this.state.isNext\n    });\n  }\n\n  emptyIndexies(board) {\n    return board.filter(s => s != \"O\" && s != \"X\");\n  }\n\n  minimax(newBoard, player) {\n    //add one to function calls\n    this.setState({\n      fc: this.state.fc + 1\n    });\n    console.log(this.state.fc); //available spots\n\n    var availSpots = this.emptyIndexies(newBoard);\n    var huPlayer = \"O\";\n    var aiPlayer = \"X\"; // checks for the terminal states such as win, lose, and tie and returning a value accordingly\n\n    if (this.winning(newBoard, huPlayer)) {\n      return {\n        score: -10\n      };\n    } else if (this.winning(newBoard, aiPlayer)) {\n      return {\n        score: 10\n      };\n    } else if (availSpots.length === 0) {\n      return {\n        score: 0\n      };\n    } // an array to collect all the objects\n\n\n    var moves = []; // loop through available spots\n\n    for (var i = 0; i < availSpots.length; i++) {\n      //create an object for each and store the index of that spot that was stored as a number in the object's index key\n      var move = {};\n      move.index = newBoard[availSpots[i]]; // set the empty spot to the current player\n\n      newBoard[availSpots[i]] = player; //if collect the score resulted from calling minimax on the opponent of the current player\n\n      if (player == aiPlayer) {\n        var result = this.minimax(newBoard, huPlayer);\n        move.score = result.score;\n      } else {\n        var result = this.minimax(newBoard, aiPlayer);\n        move.score = result.score;\n      } //reset the spot to empty\n\n\n      newBoard[availSpots[i]] = move.index; // push the object to the array\n\n      moves.push(move);\n    }\n  }\n\n  full(squares) {\n    let count = 0;\n    squares.forEach(function (item) {\n      if (item !== null) {\n        count++;\n      }\n    });\n\n    if (count === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winning(board, player) {\n    if (board[0] == player && board[1] == player && board[2] == player || board[3] == player && board[4] == player && board[5] == player || board[6] == player && board[7] == player && board[8] == player || board[0] == player && board[3] == player && board[6] == player || board[1] == player && board[4] == player && board[7] == player || board[2] == player && board[5] == player && board[8] == player || board[0] == player && board[4] == player && board[8] == player || board[2] == player && board[4] == player && board[6] == player) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winner(squares) {\n    const win_combination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < win_combination.length; i++) {\n      const _win_combination$i = _slicedToArray(win_combination[i], 3),\n            a = _win_combination$i[0],\n            b = _win_combination$i[1],\n            c = _win_combination$i[2];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (squares[a] === \"O\") {\n          axios.get(\"http://127.0.0.1:9393/increaseWins?name=\".concat(this.state.inputName));\n          console.log(squares[a]);\n          window.location.reload();\n        } else {\n          axios.get(\"http://127.0.0.1:9393/increaseWins?name=AI\");\n          console.log(squares[a]);\n          window.location.reload();\n        }\n\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    var aiPlayer = \"X\";\n    const winner = this.winner(this.state.squares, aiPlayer);\n    const isFilled = this.full(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'The winner is: ' + winner;\n    } else if (!winner && isFilled) {\n      status = 'Game drawn';\n    } else {\n      status = 'Now ' + (this.state.isNext ? 'X' : 'O') + '\\'s turn';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)), React.createElement(\"form\", {\n      action: this.emptyIndexies(this.state.squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js"],"names":["React","axios","Board","Component","constructor","props","state","squares","Array","fill","fc","componentDidMount","aiPlayer","bestSpot","minimax","console","log","index","renderSquare","i","handlePick","slice","winner","full","huPlayer","isNext","setState","emptyIndexies","board","filter","s","newBoard","player","availSpots","winning","score","length","moves","move","result","push","count","forEach","item","win_combination","a","b","c","get","inputName","window","location","reload","render","isFilled","status"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {squares: Array(9).fill(null), fc: 0};\n    }\n\n    componentDidMount() {\n        var aiPlayer = \"X\";\n        var bestSpot = this.minimax(this.state.squares, aiPlayer);\n        console.log(\"index: \" + bestSpot.index);\n        console.log(\"function calls: \" + this.state.fc);\n    }\n\n    renderSquare(i) {\n        return <button onClick={() => this.handlePick(i)}>{this.state.squares[i]}</button>\n    }\n\n    handlePick(i) {\n        const squares = this.state.squares.slice();\n\t\tif (this.winner(squares) || squares[i]) {\n            return;\n\t\t}\n\n\t\tif(this.full(squares) === true) {\n\t\t\treturn;\n        }\n    \n\n        var aiPlayer = \"X\";\n        var huPlayer = \"O\";\n\t\tsquares[i] = this.state.isNext ? aiPlayer : huPlayer;\n\t\tthis.setState({\n\t\t\tsquares: squares,\n\t\t\tisNext: !this.state.isNext\n        });\n        \n    }\n\n    emptyIndexies(board){\n        return board.filter(s => s != \"O\" && s != \"X\");\n    }\n\n    minimax(newBoard, player){\n        //add one to function calls\n        this.setState({fc: this.state.fc + 1});\n        console.log(this.state.fc);\n        //available spots\n        var availSpots = this.emptyIndexies(newBoard);\n        var huPlayer = \"O\";\n        var aiPlayer = \"X\";\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\n        if (this.winning(newBoard, huPlayer)){\n           return {score:-10};\n        }\n          else if (this.winning(newBoard, aiPlayer)){\n          return {score:10};\n          }\n        else if (availSpots.length === 0){\n            return {score:0};\n        }\n\n        // an array to collect all the objects\n        var moves = [];\n\n        // loop through available spots\n        for (var i = 0; i < availSpots.length; i++){\n            //create an object for each and store the index of that spot that was stored as a number in the object's index key\n            var move = {};\n            move.index = newBoard[availSpots[i]];\n\n            // set the empty spot to the current player\n            newBoard[availSpots[i]] = player;\n\n            //if collect the score resulted from calling minimax on the opponent of the current player\n            if (player == aiPlayer){\n                var result = this.minimax(newBoard, huPlayer);\n                move.score = result.score;\n            }\n            else{\n                var result = this.minimax(newBoard, aiPlayer);\n                move.score = result.score;\n            }\n\n            //reset the spot to empty\n            newBoard[availSpots[i]] = move.index;\n\n            // push the object to the array\n            moves.push(move);\n        }\n    }\n\n    full(squares) {\n        let count = 0;\n        squares.forEach(function (item) {\n            if (item !== null) {\n                count++;\n            }\n        });\n        if(count === 9) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    winning(board, player) {\n        if (\n            (board[0] == player && board[1] == player && board[2] == player) ||\n            (board[3] == player && board[4] == player && board[5] == player) ||\n            (board[6] == player && board[7] == player && board[8] == player) ||\n            (board[0] == player && board[3] == player && board[6] == player) ||\n            (board[1] == player && board[4] == player && board[7] == player) ||\n            (board[2] == player && board[5] == player && board[8] == player) ||\n            (board[0] == player && board[4] == player && board[8] == player) ||\n            (board[2] == player && board[4] == player && board[6] == player)\n            ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    winner(squares) {\n        const win_combination = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n      \n        for (let i = 0; i < win_combination.length; i++) {\n            const [a, b, c] = win_combination[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                if (squares[a] === \"O\") {\n                    axios.get(`http://127.0.0.1:9393/increaseWins?name=${this.state.inputName}`);\n                    console.log(squares[a]);\n                    window.location.reload();\n                } else {\n                    axios.get(`http://127.0.0.1:9393/increaseWins?name=AI`);\n                    console.log(squares[a]);\n                    window.location.reload();\n                }\n                return squares[a];\n            }\n        }\n      \n        return null;\n    }\n\n  render() {\n    var aiPlayer = \"X\";\n    const winner = this.winner(this.state.squares, aiPlayer);\n    const isFilled = this.full(this.state.squares);\n    let status;\n    if (winner) {\n        status = 'The winner is: ' + winner;\n    } else if(!winner && isFilled) {\n        status = 'Game drawn';\n    } else {\n        status = 'Now ' + (this.state.isNext ? 'X' : 'O') + '\\'s turn';\n    }\n\n    return (\n    <div className=\"container\">\n        <h1 className=\"status\">{status}</h1>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <form action={this.emptyIndexies(this.state.squares)}>\n            <input type=\"submit\" value=\"New game\"/>\n        </form>\n    </div>\n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
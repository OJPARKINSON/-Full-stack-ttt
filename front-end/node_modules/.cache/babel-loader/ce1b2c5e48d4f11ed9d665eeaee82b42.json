{"ast":null,"code":"import _slicedToArray from \"/Users/ops03/Desktop/tic-tac-toe/front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js\";\nimport React from 'react';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      fc: 0,\n      isNext: \"O\"\n    };\n  }\n\n  componentDidMount() {\n    this.play();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('prevState', prevState);\n    console.log('current state', this.state);\n  }\n\n  play() {\n    this.setState({\n      squares: Array(9).fill(null)\n    });\n    this.emptyIndexies(this.state.squares);\n    var aiPlayer = \"X\";\n  }\n\n  renderSquare(i) {\n    return React.createElement(\"button\", {\n      onClick: () => this.handlePick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, this.state.squares[i]);\n  }\n\n  handlePick(i) {\n    const squares = this.state.squares;\n\n    if (this.winner(squares)) {\n      console.log(\"winner\");\n      return;\n    }\n\n    if (this.full(squares) === \"X\" || this.full(squares) === \"O\") {\n      console.log(\"full\");\n      return;\n    }\n\n    var next = \"\";\n    squares[i] = this.state.isNext;\n\n    if (this.state.isNext == \"O\") {\n      next = \"X\";\n    }\n\n    if (this.state.isNext == \"X\") {\n      next = \"O\";\n    }\n\n    this.setState({\n      squares: squares,\n      isNext: next\n    });\n  } // minimax(newBoard, player){\n  //     if (this.winner(this.state.squares)) {\n  //         return;\n  //     } else if(!this.winner(this.state.squares) && this.isFilled) {\n  //         return;\n  //     }\n  //     var updatedFC = this.state.fc + 1\n  //     this.setState({fc: updatedFC});\n  //     console.log(this.state.fc);\n  //     var availSpots = this.emptyIndexies(newBoard);\n  //     var huPlayer = \"O\";\n  //     var aiPlayer = \"X\";\n  //     if (this.winning(newBoard, huPlayer)){\n  //         console.log(\"Huwinning\")\n  //        return {score:-10};\n  //     }\n  //     else if (this.winning(newBoard, aiPlayer)){\n  //         console.log(\"Aiwinning\")\n  //       return {score:10};\n  //       }\n  //     else if (availSpots.length === 0){\n  //         console.log(\"winning\")\n  //         return {score:0};\n  //     }\n  //     var moves = [];\n  //     for (var i = 0; i < availSpots.length; i++){\n  //         var move = {};\n  //         var result = 0;\n  //         newBoard[availSpots[i]] = player;\n  //         if (player === aiPlayer){\n  //             result = this.minimax(newBoard, huPlayer);\n  //             move.score = result.score;\n  //         }\n  //         else{\n  //         result = this.minimax(newBoard, aiPlayer);\n  //         move.score = result.score;\n  //         }\n  //         newBoard[availSpots[i]] = move.index;\n  //         moves.push(move);\n  //     }\n  //     var bestMove;\n  //     if(player === aiPlayer){\n  //       var bestScore = -10000;\n  //       for(var i = 0; i < moves.length; i++){\n  //         if(moves[i].score > bestScore){\n  //           bestScore = moves[i].score;\n  //           bestMove = i;\n  //         }\n  //       }\n  //     }else{\n  //       var bestScore = 10000;\n  //       for(var i = 0; i < moves.length; i++){\n  //         if(moves[i].score < bestScore){\n  //           bestScore = moves[i].score;\n  //           bestMove = i;\n  //         }\n  //       }\n  //     }\n  //     console.log(moves[bestMove])\n  //     return moves[bestMove];\n  // }\n\n\n  full(squares) {\n    let count = 0;\n    squares.forEach(function (item) {\n      if (item !== null) {\n        count++;\n      }\n    });\n\n    if (count === 9) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winning(board, player) {\n    if (board[0] === player && board[1] === player && board[2] === player || board[3] === player && board[4] === player && board[5] === player || board[6] === player && board[7] === player && board[8] === player || board[0] === player && board[3] === player && board[6] === player || board[1] === player && board[4] === player && board[7] === player || board[2] === player && board[5] === player && board[8] === player || board[0] === player && board[4] === player && board[8] === player || board[2] === player && board[4] === player && board[6] === player) {\n      console.log(\"this user is winning\");\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  winner(squares) {\n    const win_combination = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < win_combination.length; i++) {\n      const _win_combination$i = _slicedToArray(win_combination[i], 3),\n            a = _win_combination$i[0],\n            b = _win_combination$i[1],\n            c = _win_combination$i[2];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (squares[a] === \"O\") {\n          this.play();\n        } else {\n          this.play();\n        }\n\n        return squares[a];\n      }\n    }\n\n    return null;\n  }\n\n  emptyIndexies(board) {\n    return board.filter(s => s !== \"O\" && s !== \"X\");\n  }\n\n  render() {\n    const winner = this.winner(this.state.squares);\n    const isFilled = this.full(this.state.squares);\n    let status;\n\n    if (winner) {\n      status = 'The winner is: ' + winner;\n    } else if (!this.winner(this.state.squares) && isFilled) {\n      status = 'Game drawn';\n    } else {\n      status = 'Now ' + this.state.isNext + '\\'s turn';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)), React.createElement(\"form\", {\n      action: this.emptyIndexies(this.state.squares),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/ops03/Desktop/tic-tac-toe/front-end/src/components/board.js"],"names":["React","Board","Component","constructor","props","state","squares","Array","fill","fc","isNext","componentDidMount","play","componentDidUpdate","prevProps","prevState","console","log","setState","emptyIndexies","aiPlayer","renderSquare","i","handlePick","winner","full","next","count","forEach","item","winning","board","player","win_combination","length","a","b","c","filter","s","render","isFilled","status"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {squares: Array(9).fill(null), fc: 0, isNext: \"O\"};\n    }\n\n    componentDidMount() {\n        this.play()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('prevState', prevState)\n        console.log('current state', this.state)\n    }\n\n    play() {\n        this.setState({squares: Array(9).fill(null)})\n        this.emptyIndexies(this.state.squares);\n        var aiPlayer = \"X\";\n        \n    }\n\n    renderSquare(i) {\n        return <button onClick={() => this.handlePick(i)}>{this.state.squares[i]}</button>\n    }\n\n    handlePick(i) {\n        const squares = this.state.squares;\n\t\tif (this.winner(squares)) {\n            console.log(\"winner\")\n            return;\n\t\t}\n\n\t\tif(this.full(squares) === \"X\" || this.full(squares) === \"O\" ) {\n            console.log(\"full\")\n\t\t\treturn;\n        }\n        var next = \"\";\n        squares[i] = this.state.isNext;\n        if (this.state.isNext == \"O\") {\n            next = \"X\";\n        } \n        if (this.state.isNext == \"X\") {\n            next = \"O\";\n        }\n\t\tthis.setState({\n\t\t\tsquares: squares,\n\t\t\tisNext: next\n        });\n        \n    }\n\n    // minimax(newBoard, player){\n    //     if (this.winner(this.state.squares)) {\n    //         return;\n    //     } else if(!this.winner(this.state.squares) && this.isFilled) {\n    //         return;\n    //     }\n\n    //     var updatedFC = this.state.fc + 1\n    //     this.setState({fc: updatedFC});\n    //     console.log(this.state.fc);\n    //     var availSpots = this.emptyIndexies(newBoard);\n    //     var huPlayer = \"O\";\n    //     var aiPlayer = \"X\";\n    //     if (this.winning(newBoard, huPlayer)){\n    //         console.log(\"Huwinning\")\n    //        return {score:-10};\n    //     }\n    //     else if (this.winning(newBoard, aiPlayer)){\n    //         console.log(\"Aiwinning\")\n    //       return {score:10};\n    //       }\n    //     else if (availSpots.length === 0){\n    //         console.log(\"winning\")\n    //         return {score:0};\n    //     }\n    //     var moves = [];\n    //     for (var i = 0; i < availSpots.length; i++){\n    //         var move = {};\n    //         var result = 0;\n    //         newBoard[availSpots[i]] = player;\n    //         if (player === aiPlayer){\n    //             result = this.minimax(newBoard, huPlayer);\n    //             move.score = result.score;\n    //         }\n    //         else{\n    //         result = this.minimax(newBoard, aiPlayer);\n    //         move.score = result.score;\n    //         }\n        \n    //         newBoard[availSpots[i]] = move.index;\n    //         moves.push(move);\n    //     }\n    //     var bestMove;\n    //     if(player === aiPlayer){\n    //       var bestScore = -10000;\n    //       for(var i = 0; i < moves.length; i++){\n    //         if(moves[i].score > bestScore){\n    //           bestScore = moves[i].score;\n    //           bestMove = i;\n    //         }\n    //       }\n    //     }else{\n    //       var bestScore = 10000;\n    //       for(var i = 0; i < moves.length; i++){\n    //         if(moves[i].score < bestScore){\n    //           bestScore = moves[i].score;\n    //           bestMove = i;\n    //         }\n    //       }\n    //     }\n    //     console.log(moves[bestMove])\n    //     return moves[bestMove];\n    // }\n\n    aiPlay\n\n    full(squares) {\n        let count = 0;\n        squares.forEach(function (item) {\n            if (item !== null) {\n                count++;\n            }\n        });\n        if(count === 9) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    winning(board,player) {\n        if (\n            (board[0] === player && board[1] === player && board[2] === player) ||\n            (board[3] === player && board[4] === player && board[5] === player) ||\n            (board[6] === player && board[7] === player && board[8] === player) ||\n            (board[0] === player && board[3] === player && board[6] === player) ||\n            (board[1] === player && board[4] === player && board[7] === player) ||\n            (board[2] === player && board[5] === player && board[8] === player) ||\n            (board[0] === player && board[4] === player && board[8] === player) ||\n            (board[2] === player && board[4] === player && board[6] === player)\n            ) {\n            console.log(\"this user is winning\")\n            return true;\n        } else {\n            \n            return false;\n        }\n    }\n\n    winner(squares) {\n        const win_combination = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n      \n        for (let i = 0; i < win_combination.length; i++) {\n            const [a, b, c] = win_combination[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                if (squares[a] === \"O\") {\n\n                    this.play()\n                } else {\n \n            \n                    this.play()\n                }\n                return squares[a];\n            }\n        }\n      \n        return null;\n    }\n\n    emptyIndexies(board){\n        return board.filter(s => s !== \"O\" && s !== \"X\");\n    }\n\n  render() {\n    const winner = this.winner(this.state.squares);\n    const isFilled = this.full(this.state.squares);\n    let status;\n    if (winner) {\n        status = 'The winner is: ' + winner;\n    } else if(!this.winner(this.state.squares) && isFilled) {\n        status = 'Game drawn';\n    } else {\n        status = 'Now ' + this.state.isNext + '\\'s turn';\n    }\n\n    return (\n    <div className=\"container\">\n        <h1 className=\"status\">{status}</h1>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <form action={this.emptyIndexies(this.state.squares)}>\n            <input type=\"submit\" value=\"New game\"/>\n        </form>\n    </div>\n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}